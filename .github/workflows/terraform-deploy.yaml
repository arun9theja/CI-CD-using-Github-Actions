name: "Terraform Deployment"
on:
  # Manual trigger
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches: [ main ]
defaults:
  run:
    shell: bash
jobs:
  sonarqube:
    name: SonarQube Trigger
    runs-on: ubuntu-latest
    steps:
    - name: Checking out
      uses: actions/checkout@master
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - name: SonarQube Scan
      uses: kitabisa/sonarqube-action@v1.2.0
      with:
        host:  http://100.26.18.84:9000/
        login: squ_559e1131b3b6b92dd22a52679bb4c10bb961e5c3
  build:
     name: Maven Build
     runs-on: [ ubuntu-latest ]
     steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Build with Maven
        run: mvn package
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: LoginWebApp-1.war
          path: target/LoginWebApp-1.war
  docker-build:
    needs: build
    runs-on: [ ubuntu-latest ]
    steps:
    - uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1 

    - name: Login to Public ECR
      uses: docker/login-action@v1
      with:
        registry: public.ecr.aws

    - name: Download Artifact
      uses: actions/download-artifact@v2
      with:
          name: LoginWebApp-1.war

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
       ECR_REGISTRY: public.ecr.aws/w0f5g4k6
       ECR_REPOSITORY: javaweb
       IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
  terraform:
    needs: docker-build
    name:   ${{matrix.runner}} - ${{ matrix.environment }}
    runs-on: [ '${{ matrix.runner }}']
    defaults:
      run:
        working-directory: terraform
    strategy:
      max-parallel: 1
      matrix:
         include:
           - environment: test
             runner: ubuntu-latest
    env:
         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         AWS_DEFAULT_REGION: us-east-2
         TF_VAR_container_version: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
      - name: Terraform Init
        id: init
        run: |
           rm -rf .terraform
           terraform init -backend-config=${{ matrix.environment }}/backend.tfvars -upgrade=true -no-color -input=false
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -input=false -var-file=${{ matrix.environment }}/terraform.tfvars -no-color
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        id: apply
        run: terraform apply -auto-approve -input=false -var-file=${{ matrix.environment }}/terraform.tfvars
      - name: Terraform destroy
        if: github.ref == 'refs/heads/destroy'
        id: destroy
        run: terraform destroy -auto-approve -input=false -var-file=${{ matrix.environment }}/terraform.tfvars
  comment:
    runs-on: ubuntu-latest
    needs: terraform
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/github-script@v5
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ‘‹ Thanks for reporting!'
            })
